{
  "language": "Solidity",
  "sources": {
    "src/FactoryWithInit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ninterface IRegistry {\n    function registerModule(\n        bytes32 resolverUID,\n        address moduleAddress,\n        bytes calldata metadata,\n        bytes calldata resolverContext\n    ) external;\n}\n\ninterface IFactoryWithInit {\n    event DeployedAndInitialized(address indexed addr, bytes32 indexed salt);\n\n    error InvalidSalt();\n    error InvalidAddress();\n    error InitializationFailed();\n\n    struct Deployment {\n        bytes32 salt;\n        bytes initCode;\n        bytes initCall;\n    }\n\n    struct RegistryData {\n        bytes32 resolverUID;\n        bytes metadata;\n        bytes resolverContext;\n    }\n\n    function deployInitRegister(Deployment calldata deployment, RegistryData calldata registryData)\n        external\n        payable\n        returns (address deploymentAddress);\n}\n\ncontract FactoryWithInit is IFactoryWithInit {\n    IRegistry internal immutable REGISTRY;\n\n    constructor(address registry) {\n        REGISTRY = IRegistry(registry);\n    }\n\n    modifier containsCaller(bytes32 salt) {\n        // prevent contract submissions from being stolen from tx.pool by requiring\n        // that the first 20 bytes of the submitted salt match msg.sender.\n        if ((address(bytes20(salt)) != msg.sender) && (bytes20(salt) != bytes20(0))) {\n            revert InvalidSalt();\n        }\n        _;\n    }\n\n    function calcAddress(bytes memory initCode, bytes32 salt) public view returns (address targetDeploymentAddress) {\n        targetDeploymentAddress = address(\n            uint160( // downcast to match the address type.\n                uint256( // convert to uint to truncate upper digits.\n                    keccak256( // compute the CREATE2 hash using 4 inputs.\n                        abi.encodePacked( // pack all inputs to the hash together.\n                            hex\"ff\", // start with 0xff to distinguish from RLP.\n                            address(this), // this contract will be the caller.\n                            salt, // pass in the supplied salt value.\n                            keccak256( // pass in the hash of initialization code.\n                            abi.encodePacked(initCode))\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    function deployInitRegister(Deployment calldata deployment, RegistryData calldata registryData)\n        external\n        payable\n        containsCaller(deployment.salt)\n        returns (address deploymentAddress)\n    {\n        // determine the target address for contract deployment.\n        bytes memory initCode = deployment.initCode;\n        bytes32 salt = deployment.salt;\n        address targetDeploymentAddress = calcAddress(initCode, salt);\n\n        // using inline assembly: load data and length of data, then call CREATE2.\n        assembly {\n            let encoded_data := add(0x20, initCode) // load initialization code.\n            let encoded_size := mload(initCode) // load the init code's length.\n            deploymentAddress :=\n                create2( // call CREATE2 with 4 arguments.\n                    callvalue(), // forward any attached value.\n                    encoded_data, // pass in initialization code.\n                    encoded_size, // pass in init code's length.\n                    salt // pass in the salt value.\n                )\n        }\n\n        // check address against target to ensure that deployment was successful.\n        if (deploymentAddress != targetDeploymentAddress) revert InvalidAddress();\n\n        (bool success,) = deploymentAddress.call(deployment.initCall);\n        if (!success) {\n            revert InitializationFailed();\n        }\n\n        REGISTRY.registerModule(registryData.resolverUID, deploymentAddress, registryData.metadata, registryData.resolverContext);\n        emit DeployedAndInitialized(deploymentAddress, salt);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": ["forge-std/=lib/forge-std/src/"],
    "optimizer": { "enabled": true, "runs": 200 },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ]
      }
    },
    "evmVersion": "paris",
    "viaIR": false,
    "libraries": {}
  }
}
